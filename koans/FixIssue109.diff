diff --git a/koans/pom.xml b/koans/pom.xml
index c9b7b36..1ac4628 100644
--- a/koans/pom.xml
+++ b/koans/pom.xml
@@ -60,6 +60,15 @@
     <plugins>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.3</version>
+        <configuration>
+          <source>1.8</source>
+          <target>1.8</target>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-enforcer-plugin</artifactId>
           <version>1.3.1</version>
           <executions>
diff --git a/koans/src/java7/AboutTryWithResources.java b/koans/src/java7/AboutTryWithResources.java
index b296a2e..60d77d9 100644
--- a/koans/src/java7/AboutTryWithResources.java
+++ b/koans/src/java7/AboutTryWithResources.java
@@ -9,6 +9,27 @@ import static com.sandwich.util.Assert.assertEquals;
 
 public class AboutTryWithResources {
 
+    class AutoClosableResource implements AutoCloseable{
+        public void foo() throws WorkException{
+            throw new WorkException("Exception thrown while working");
+        }
+        public void close() throws CloseException{
+            throw new CloseException("Exception thrown while closing");
+        }
+    }
+
+    class WorkException extends Exception {
+        public WorkException(String message) {
+            super(message);
+        }
+    }
+
+    class CloseException extends Exception {
+        public CloseException(String message) {
+            super(message);
+        }
+    }
+
     @Koan
     public void lookMaNoClose() {
         String str = "first line"
@@ -25,16 +46,18 @@ public class AboutTryWithResources {
         } catch (IOException e) {
             line = "error";
         }
-        assertEquals(line, __);
+        assertEquals(line, "first line");
     }
 
     @Koan
     public void lookMaNoCloseWithException() throws IOException {
-        String line;
+        String line = "no need to close readers";
         try (BufferedReader br =
                      new BufferedReader(
                              new FileReader("I do not exist!"))) {
             line = br.readLine();
+        }catch(FileNotFoundException e){
+            line = "no more leaking!";
         }
         assertEquals(line, __);
     }
@@ -82,25 +105,4 @@ public class AboutTryWithResources {
             autoClosableResource.foo();
         }
     }
-}
-
-class AutoClosableResource implements AutoCloseable{
-    public void foo() throws WorkException{
-        throw new WorkException("Exception thrown while working");
-    }
-    public void close() throws CloseException{
-        throw new CloseException("Exception thrown while closing");
-    }
-}
-
-class WorkException extends Exception {
-    public WorkException(String message) {
-        super(message);
-    }
-}
-
-class CloseException extends Exception {
-    public CloseException(String message) {
-        super(message);
-    }
-}
+}
\ No newline at end of file
diff --git a/koans/src/java8/AboutDefaultMethods.java b/koans/src/java8/AboutDefaultMethods.java
index f2f2025..4a1f5e1 100644
--- a/koans/src/java8/AboutDefaultMethods.java
+++ b/koans/src/java8/AboutDefaultMethods.java
@@ -5,26 +5,6 @@ import com.sandwich.koan.Koan;
 import static com.sandwich.koan.constant.KoanConstants.__;
 import static com.sandwich.util.Assert.assertEquals;
 
-
-interface StringUtil {
-
-    //static method in interface
-    static String enclose(String in){
-        return "[" + in + "]";
-    }
-
-    String reverse(String s);
-
-    //interface can contain non-abstract method implementations marked by "default" keyword
-    default String capitalize(String s) {
-        return s.toUpperCase();
-    }
-
-    default String capitalizeFirst(String s) {
-        return s.substring(0, 1).toUpperCase() + s.substring(1);
-    }
-}
-
 public class AboutDefaultMethods {
 
     @Koan
@@ -45,4 +25,23 @@ public class AboutDefaultMethods {
         assertEquals(StringUtil.enclose("me"), __);
     }
 
+    interface StringUtil {
+
+        //static method in interface
+        static String enclose(String in){
+            return "[" + in + "]";
+        }
+
+        String reverse(String s);
+
+        //interface can contain non-abstract method implementations marked by "default" keyword
+        default String capitalize(String s) {
+            return s.toUpperCase();
+        }
+
+        default String capitalizeFirst(String s) {
+            return s.substring(0, 1).toUpperCase() + s.substring(1);
+        }
+    }
+
 }
diff --git a/koans/src/java8/AboutLambdas.java b/koans/src/java8/AboutLambdas.java
index 7cb1039..f8fa2d3 100644
--- a/koans/src/java8/AboutLambdas.java
+++ b/koans/src/java8/AboutLambdas.java
@@ -8,12 +8,12 @@ import java.util.function.Predicate;
 import static com.sandwich.util.Assert.assertEquals;
 import static com.sandwich.koan.constant.KoanConstants.__;
 
-interface Caps {
-    public String capitalize(String name);
-}
-
 public class AboutLambdas {
 
+    interface Caps {
+        public String capitalize(String name);
+    }
+
     String fieldFoo = "Lambdas";
 
     @Override
diff --git a/koans/src/java8/AboutMultipleInheritance.java b/koans/src/java8/AboutMultipleInheritance.java
index 1e3fc76..0d4769d 100644
--- a/koans/src/java8/AboutMultipleInheritance.java
+++ b/koans/src/java8/AboutMultipleInheritance.java
@@ -5,28 +5,28 @@ import com.sandwich.koan.Koan;
 import static com.sandwich.util.Assert.assertEquals;
 import static com.sandwich.koan.constant.KoanConstants.__;
 
-interface Human{
-    default String sound(){
-        return "hello";
+public class AboutMultipleInheritance {
+    
+    interface Human{
+        default String sound(){
+            return "hello";
+        }
     }
-}
 
-interface Bull{
-    default String sound(){
-        return "moo";
+    interface Bull{
+        default String sound(){
+            return "moo";
+        }
     }
-}
 
-class Minotaur implements Human, Bull{
-    //both interfaces implement same default method
-    //has to be overridden
-    @Override
-    public String sound(){
-        return Bull.super.sound();
+    class Minotaur implements Human, Bull{
+        //both interfaces implement same default method
+        //has to be overridden
+        @Override
+        public String sound(){
+            return Bull.super.sound();
+        }
     }
-}
-
-public class AboutMultipleInheritance {
 
     @Koan
     public void multipleInheritance(){
@@ -34,4 +34,4 @@ public class AboutMultipleInheritance {
         assertEquals(minotaur.sound(), __);
     }
 
-}
\ No newline at end of file
+}
