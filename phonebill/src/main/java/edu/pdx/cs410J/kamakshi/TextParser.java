package edu.pdx.cs410J.kamakshi;

import edu.pdx.cs410J.AbstractPhoneBill;
import edu.pdx.cs410J.ParserException;
import edu.pdx.cs410J.PhoneBillParser;

import java.io.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.StringTokenizer;

/**
 * This class parses the text output generated by a
 * <code>TextDumper</code> and creates a Phone Bill.
 * It also Implements PhoneBillParser and its method Parse().
 *
 * @see TextDumper
 * @author Kamakshi Nagar
 */
public class TextParser implements PhoneBillParser {

    private PhoneBill phoneBill; //The Phone Bill which we are creating.
    private LineNumberReader in; //The Phone Bill will be Read from here.
    private static final PrintStream out = System.out;

    private static void debug(String s) {
        if (Boolean.getBoolean("TextParser.DEBUG")) {
            out.println(s); }
    }
    /**
     * Creates a new text parser that reads its input from a file of a
     * given name.
     */
    public TextParser(String fileName) throws FileNotFoundException {
        this(new File(fileName));
    }
    /**
     * Creates a new text parser that reads its input from the given
     * file.
     */
    public TextParser(File file) throws FileNotFoundException {
        this(new FileReader(file));
    }
    /**
     * Creates a new text parser that reads its input from the given
     * writer.  This lets us read from a sources other than files.
     */
    public TextParser(Reader reader) {
        this.in = new LineNumberReader(reader);
    }

    /**
     * Parses the specified input source (like file) and from it creates a Phone Bill.
     *
     * @return  PhoneBill that contains the Collection of Phone Calls
     * @throws ParserException
     *         The data/text source is malformatted
     */
    @Override
    public AbstractPhoneBill parse() throws ParserException {

        this.phoneBill = new PhoneBill();
        try{
        while(this.in.ready()) {
            String line = this.in.readLine();
            // Ignore empty lines
            if (line == null) {
                break;
            } else if (line.equals("")) {
                continue;
            }
            debug("Read line: \"" + line + "\"");

            String type = null;

            StringTokenizer st = new StringTokenizer(line,":");

            if(st.hasMoreTokens()) {
                type = st.nextToken();
            }

            if (st.hasMoreTokens()) {
                StringBuilder sb= new StringBuilder();
                while (st.hasMoreTokens()) {
                    sb.append(st.nextToken() + " ");}
                if(type.equals("Customer")){ phoneBill.setCustomerName(sb.toString().trim());}
            }

            if (type.equals("Customer")) {
                this.parsePhoneCall();
            }

           }
        }  catch (IOException e){System.err.println("some io err..");}

        return this.phoneBill;
    }

    /**
     * This Method Parse the Phone call line by line.
     * Set the caller number, callee number , starttime and endtime of a phone call,
     * and adds all the phone calls to the phone bill.
     */
    private void parsePhoneCall(){

        PhoneCall phoneCall;

        String caller=null; String callee=null; String start=null;String end= null;
        for (int i = 0; i < 4; i++) {
            String line = null;
            try {
                if (!this.in.ready()) {
                    System.err.println("Unexpected end of file");}
                line = this.in.readLine();
            } catch (IOException ex) {
                System.err.println("IOException: " + ex.getMessage());
            }

            if (line == null) {break;}
            // Ignore empty lines
            if (line.equals("")) {continue;}
            debug("Read line: \"" + line + "\"");

            // Parse the line
            String key = null;            String value = null;
            StringTokenizer st = new StringTokenizer(line, ":");

            if (st.hasMoreTokens()) {key = st.nextToken();
            } else {
                System.err.println("No key specified");}

            if (st.hasMoreTokens()) {
                StringBuffer sb = new StringBuffer();

               if(key.equals("Caller")|| key.equals("Callee")){
                    while (st.hasMoreTokens()) {
                        sb.append(st.nextToken() + " ");}
                value = sb.toString().trim();}
               else{
                   String[] data = line.split(" ");
                   value= (data[1]+" "+data[2]+" "+data[3]).trim();
               }
            } else System.err.println("No value specified");

                if (key.equals("Caller")) {caller = value;
                }
                else if (key.equals("Callee")) {callee= value;}
                else if (key.equals("StartTime")) {
                   start = value;
                }
                else if (key.equals("EndTime")) {
                       end= value;
                }
            }

        phoneCall= new PhoneCall(caller,callee,start,end);
        this.phoneBill.addPhoneCall(phoneCall);
    }
}
